/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 rabbit-hole-area.glb 
*/

import React, { useRef } from 'react'
import { useGLTF, useMatcapTexture, useTexture, shaderMaterial } from '@react-three/drei'
import { RigidBody } from '@react-three/rapier'
import * as THREE from 'three'
import { useLoader, extend, useFrame } from '@react-three/fiber'
import portalVertexShader from '../../shaders/portal/vertex.glsl' // TODO not a big fan of paths like this
import portalFragmentShader from '../../shaders/portal/fragment.glsl'
import MatcapManager from 'src/MatcapManager.js'

const PortalMaterial = shaderMaterial(
    {
        uTime: 0,
        uColorStart: new THREE.Color('#ffffff'),
        uColorEnd: new THREE.Color('#000000')
    },
    portalVertexShader,
    portalFragmentShader
)

extend({ PortalMaterial })

export default function RabbitHoleArea(props) {

    const { nodes, materials } = useGLTF('./models/rabbit-hole-area.glb')
    const matcapManager = new MatcapManager()

    // Animate portal
    const portalMaterialRef = useRef()
    useFrame((state, delta) => {
        portalMaterialRef.current.uTime += delta
    })

    return <>
        <group {...props} dispose={null}>
            {/**
             * Add a mesh for each mesh in the nodes array
             */}
            {Object.entries(nodes).map(([key, mesh_obj]) => (
                mesh_obj.isObject3D && mesh_obj.type === "Mesh" && (
                    <mesh key={key}
                          ref={mesh_obj.name === "rabbit_hole_portal" ? portalMaterialRef : null}
                          geometry={mesh_obj.geometry}
                          position={[mesh_obj.position.x, mesh_obj.position.y, mesh_obj.position.z]} 
                          rotation={[mesh_obj.rotation._x, mesh_obj.rotation._y, mesh_obj.rotation._z]} 
                          scale={[mesh_obj.scale.x, mesh_obj.scale.y, mesh_obj.scale.z]}>
                        
                        {/* 
                            TODO Change all the logical names of the materials to their png file name counterpart
                            TODO It would be more efficent to load all the textures at once and then assign them to the materials here.
                        */}
                        <meshMatcapMaterial matcap={matcapManager.getMatcapByName(mesh_obj.material.name)} />
                    
                    </mesh>
                )
            ))}
        </group>
    </>
}

useGLTF.preload('./models/rabbit-hole-area.glb')
